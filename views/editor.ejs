<!DOCTYPE html>
<html lang="fr">

<head>
  <meta charset="UTF-8">
  <title>Éditeur de page HTML</title>
  <link href="https://unpkg.com/grapesjs/dist/css/grapes.min.css" rel="stylesheet" />
  <style>
    body,
    html {
      margin: 0;
      height: 100%;
    }

    #editor {
      height: 100vh;
    }

    #versioning-doc {
      position: fixed;
      bottom: 1rem;
      right: 1rem;
      max-width: 22rem;
      padding: 1rem;
      border-radius: 0.5rem;
      background: rgba(0, 0, 0, 0.75);
      color: #fff;
      font-size: 0.875rem;
      line-height: 1.4;
      box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.35);
      z-index: 999;
    }

    #versioning-doc h2 {
      margin-top: 0;
      font-size: 1rem;
    }

    #versioning-doc button {
      display: inline-block;
      margin-top: 0.5rem;
      padding: 0.25rem 0.5rem;
      border: none;
      border-radius: 0.25rem;
      background: #ffc107;
      color: #000;
      cursor: pointer;
    }
  </style>
</head>

<body>
  <div id="editor"></div>
  <aside id="versioning-doc">
    <h2>Historique des versions</h2>
    <p>
      Chaque sauvegarde conserve automatiquement l'ancienne version du formulaire dans la collection
      <code>formRevisions</code>. Les API <code>/create-form</code>, <code>/update-form/:objectId</code> et
      <code>/list-forms</code> exposent désormais <strong>version</strong>, <strong>modifiedBy</strong> et
      <strong>modificationDate</strong> pour vous aider à identifier la version active.
    </p>
    <p>
      Pour consulter l'historique complet ou restaurer une version, appelez l'endpoint
      <code>GET /form-history/:objectId</code>. Vous pouvez ensuite réappliquer une version antérieure en
      renvoyant son contenu via <code>/update-form/:objectId</code> ou en la comparant à l'éditeur courant.
    </p>
    <button type="button" onclick="this.parentElement.remove()">J'ai compris</button>
  </aside>

  <script src="https://unpkg.com/grapesjs"></script>
  <script>
    // definition de l'éditeur GrapesJS with html, css, and js components
    const editor = grapesjs.init({
      container: '#editor',
      fromElement: true,
      height: '100%',
      width: 'auto',
      storageManager: { autoload: false },
      plugins: ['gjs-preset-webpage'],
      pluginsOpts: {
        'gjs-preset-webpage': {}
      },
      canvas: {
        styles: ['https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css']
      },
      pageManager: {
        pages: [
          {
            // without an explicit ID, a random one will be created
            id: 'my-first-page',
            // CSS or a JSON of styles
            styles: '.my-el { color: red }',
            // HTML string or a JSON of components
            component: '<div class="my-el">Hello world!</div>',
          },
          {
            // without an explicit ID, a random one will be created
            id: 'my-second-page',
            // CSS or a JSON of styles
            styles: '.my-el { color: red }',
            // HTML string or a JSON of components
            component: '<div class="my-el">Hello world2</div>',
          },
        ],
      },
      styleManager: {
        sectors: [{
          name: 'General',
          open: true,
          buildProps: ['color', 'font-size', 'text-align', 'background-color'],
          properties: [
            { property: 'color', type: 'color' },
            { property: 'font-size', type: 'select', options: ['12px', '14px', '16px', '18px'] },
            { property: 'text-align', type: 'radio', options: ['left', 'center', 'right'] },
            { property: 'background-color', type: 'color' }
          ]
        }]
      },
      blockManager: {
        blocks: [
          {
            id: 'section',
            label: 'Section',
            content: '<section class="my-section"><h2>Section</h2></section>',
            category: 'Layout'
          },
          {
            id: 'text',
            label: 'Texte',
            content: '<p class="my-text">Ceci est un paragraphe.</p>',
            category: 'Text'
          },
          {
            id: 'image',
            label: 'Image',
            content: '<img src="https://via.placeholder.com/150" alt="Placeholder Image">',
            category: 'Media'
          }
        ]
      }
    });

    // Charger une page existante depuis l’API
    const pageId = new URLSearchParams(window.location.search).get("id");
    if (pageId) {
      fetch(`/api/pages/${pageId}`)
        .then(res => res.json())
        .then(page => {
          editor.setComponents(page.content);
          editor.setStyle(page.styles || '');
        });
    }

    // Ajouter bouton pour sauvegarder
    editor.Panels.addButton('options', [{
      id: 'save-db',
      className: 'fa fa-floppy-o',
      command: 'save-to-db',
      attributes: { title: 'Enregistrer' }
    }]);

    // Commande de sauvegarde dans Mongo
    editor.Commands.add('save-to-db', {
      run(editor) {
        const html = `<!DOCTYPE html>\n${editor.getHtml()}`;
        const css = editor.getCss();

        const payload = {
          slug: "/page-html",
          title: "Page HTML complète",
          layout: "raw",
          content: html,
          styles: css,
          meta: {}
        };

        fetch(pageId ? `/api/pages/${pageId}` : `/api/pages`, {
          method: pageId ? 'PUT' : 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        })
          .then(res => res.json())
          .then(data => {
            alert("Page enregistrée avec succès !");
            if (!pageId && data.id) {
              window.location.search = `?id=${data.id}`;
            }
          });
      }
    });
  </script>
</body>

</html>